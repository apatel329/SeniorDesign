void pawnalg(int xpos, int ypos, int turn, int grid [8][8]) {
    if (turn == 0) {
        if (grid[ypos + 1][xpos] == 1) {
            ill[ypos+1][xpos] = 2;
        }
        if (grid[ypos + 1][xpos] == 2) {
            ill[ypos + 1][xpos] = 1;
        }

        if (ypos == 1) {
            if (grid[ypos + 2][xpos] == 1) {
                ill[ypos + 2][xpos] = 2;
            }
            if (grid[ypos + 2][xpos] == 2) {
                ill[ypos + 2][xpos] = 1;
            }
        }

        if (grid[ypos + 1][xpos + 1] == 1) {
            ill[ypos + 1][xpos + 1] = 1;
        }
        if (grid[ypos + 1][xpos - 1] == 1) {
            ill[ypos + 1][xpos - 1] = 1;
        }

    } else {
        if (grid[ypos - 1][xpos] == 0) {
            ill[ypos - 1][xpos] = 2;
        }
        if (grid[ypos - 1][xpos] == 2) {
            ill[ypos - 1][xpos] = 1;
        }

        if (ypos == 6) {
            if (grid[ypos-2][xpos] == 0) {
                ill[ypos-2][xpos] = 2;
            }
            if (grid[ypos-2][xpos] == 2) {
                ill[ypos-2][xpos] = 1;
            }
        }
        if (grid[ypos - 1][xpos + 1] == 0) {
            ill[ypos - 1][xpos + 1] = 1;
        }
        if (grid[ypos - 1][xpos - 1] == 0) {
            ill[ypos - 1][xpos - 1] = 1;
        }

    }
}

void kingalg(int xpos, int ypos, int turn, int grid[8][8]){
    int i;
    int j;

    for (i = ypos - 1; i <= ypos + 1; i++) {
        for (j = xpos - 1; j <= xpos + 1; j++) {
            if (i >= 0 && i < 8 && j >= 0 && j <= 7) {
                if (turn == 1) {
                    if (grid[i][j] == 0) {
                        ill[i][j] = 2;
                    }
                    if (grid[i][j] == 2) {
                        ill[i][j] = 1;
                    }
                }
                if (turn==0){
                    if(grid[i][j]==1){
                        ill[i][j]=2;
                    }
                    if(grid[i][j]==2){
                        ill[i][j]==1;
                    }
                }
            }
        }
        ill[ypos][xpos] = 0;

    }

}

void bishopalg (int xpos, int ypos, int turn, int grid[8][8]){
    int i,j,k,l;
    int xplus;
    int yplus;
    int xminus;
    int yminus;
// bottom right for loop
    for (i = 0; i < 8; i++) {
        xplus = xpos + i;
        yplus = ypos + i;
        if (xplus < 8 && yplus < 8) {
            if (turn == 1) {
                if (grid[yplus][xplus] == 1) {
                    break;
                }
                if (grid[yplus][xplus] == 0) {
                    ill[yplus][xplus] = 2;
                    break;
                }
                if (grid[yplus][xplus] == 2) {
                    ill[yplus][xplus] = 1;
                }
            }
            if (turn == 0) {
                if (grid[yplus][xplus] == 0) {
                    break;
                }
                if (grid[yplus][xplus] == 1) {
                    ill[yplus][xplus] = 2;
                    break;
                }
                if (grid[yplus][xplus] == 2) {
                    ill[yplus][xplus] = 1;
                }
            }

        }
    }


    //top right for loop
    for(j=0;j<8; j++){
         xplus=xpos+j;
         yminus=ypos-j;
                 if (xplus < 8 && yminus >= 0) {
            if (turn == 1) {
                if (grid[yminus][xplus] == 1) {
                    break;
                }
                if (grid[yminus][xplus] == 0) {
                    ill[yminus][xplus] = 2;
                    break;
                }
                if (grid[yminus][xplus] == 2) {
                    ill[yminus][xplus] = 1;
                }
            }
            if (turn == 0) {
                if (grid[yminus][xplus] == 0) {
                    break;
                }
                if (grid[yminus][xplus] == 1) {
                    ill[yminus][xplus] = 2;
                    break;
                }
                if (grid[yminus][xplus] == 2) {
                    ill[yminus][xplus] = 1;
                }
            }

        }

    }
    // bottom left for loop
    for(k=0;k<8; k++){
          xminus=xpos-k;
          yplus=ypos+k;
          if (xminus >=0 && yplus < 8) {
            if (turn == 1) {
                if (grid[yplus][xminus] == 1) {
                    break;
                }
                if (grid[yplus][xminus] == 0) {
                    ill[yplus][xminus] = 2;
                    break;
                }
                if (grid[yplus][xminus] == 2) {
                    ill[yplus][xminus] = 1;
                }
            }
            if (turn == 0) {
                if (grid[yplus][xminus] == 0) {
                    break;
                }
                if (grid[yplus][xminus] == 1) {
                    ill[yplus][xminus] = 2;
                    break;
                }
                if (grid[yplus][xminus] == 2) {
                    ill[yplus][xminus] = 1;
                }
            }

        }
    }
    //top left
    for(l=0;l<8; l++){
        xminus=xpos-l;
        yminus=ypos-l;
         if (xminus >=0 && yminus < 8) {
            if (turn == 1) {
                if (grid[yminus][xminus] == 1) {
                    break;
                }
                if (grid[yminus][xminus] == 0) {
                    ill[yminus][xminus] = 2;
                    break;
                }
                if (grid[yminus][xminus] == 2) {
                    ill[yminus][xminus] = 1;
                }
            }
            if (turn == 0) {
                if (grid[yminus][xminus] == 0) {
                    break;
                }
                if (grid[yminus][xminus] == 1) {
                    ill[yminus][xminus] = 2;
                    break;
                }
                if (grid[yminus][xminus] == 2) {
                    ill[yminus][xminus] = 1;
                }
            }

        }

    }



}

void knightalg(int xpos, int ypos, int turn, int grid[8][8]) {

    //case 1
    if (xpos + 1 < 8 && ypos + 2 < 8) {
        if (turn == 1) {
            if (grid[ypos + 2][xpos + 1] == 0) {
                ill[ypos + 2][xpos + 1] = 2;
            }
            if (grid[ypos + 2][xpos + 1] == 2) {
                ill[ypos + 2][xpos + 1] = 1;
            }
        }
        if (turn == 0) {
            if (grid[ypos + 2][xpos + 1] == 1) {
                ill[ypos + 2][xpos + 1] = 2;
            }
            if (grid[ypos + 2][xpos + 1] == 2) {
                ill[ypos + 2][xpos + 1] = 1;
            }

        }
    }

    //case 2
    if (xpos - 1 >= 0 && ypos + 2 < 8) {
        if (turn == 1) {
            if (grid[ypos + 2][xpos - 1] == 0) {
                ill[ypos + 2][xpos - 1] = 2;
            }
            if (grid[ypos + 2][xpos - 1] == 2) {
                ill[ypos + 2][xpos - 1]= 1;
            }
        }
        if (turn == 0) {
            if (grid[ypos + 2][xpos - 1] == 1) {
                ill[ypos + 2][xpos - 1] = 2;
            }
            if (grid[ypos + 2][xpos - 1] == 2) {
                ill[ypos + 2][xpos - 1] = 1;
            }

        }
    }

    //case3

    if (xpos - 2 >= 0 && ypos + 1 < 8) {
        if (turn == 1) {
            if (grid[ypos + 1][xpos - 2] == 0) {
                ill[ypos + 1][xpos - 2] = 2;
            }
            if (grid[ypos + 1][xpos - 2] == 2) {
                ill[ypos + 1][xpos - 2]= 1;
            }
        }
        if (turn == 0) {
            if (grid[ypos + 1][xpos - 2] == 1) {
                ill[ypos + 1][xpos - 2] = 2;
            }
            if (grid[ypos + 1][xpos - 2] == 2) {
                ill[ypos + 1][xpos - 2]= 1;
            }

        }
    }
//case 4
    if (xpos - 2 >= 0 && ypos - 1 >= 0) {
        if (turn == 1) {
            if (grid[ypos - 1][xpos - 2] == 0) {
                ill[ypos - 1][xpos - 2] = 2;
            }
            if (grid[ypos - 1][xpos - 2] == 2) {
                ill[ypos - 1][xpos - 2] = 1;
            }
        }
        if (turn == 0) {
            if (grid[ypos - 1][xpos - 2] == 1) {
                ill[ypos - 1][xpos - 2] = 2;
            }
            if (grid[ypos - 1][xpos - 2] == 2) {
                ill[ypos - 1][xpos - 2] = 1;
            }

        }
    }

    //case 5
    if (xpos + 1 < 8 && ypos - 2 >= 0) {
        if (turn == 1) {
            if (grid[ypos - 2][xpos + 1] == 0) {
                ill[ypos - 2][xpos + 1] = 2;
            }
            if (grid[ypos - 2][xpos + 1] == 2) {
                ill[ypos - 2][xpos + 1] = 1;
            }
        }
        if (turn == 0) {
            if (grid[ypos - 2][xpos + 1] == 1) {
                ill[ypos - 2][xpos + 1] = 2;
            }
            if (grid[ypos - 2][xpos + 1] == 2) {
                ill[ypos - 2][xpos + 1] = 1;
            }

        }
    }
//case 6
    if (xpos - 1 < 8 && ypos - 2 >= 0) {
        if (turn == 1) {
            if (grid[ypos - 2][xpos - 1] == 0) {
                ill[ypos - 2][xpos - 1] = 2;
            }
            if (grid[ypos - 2][xpos - 1] == 2) {
                ill[ypos - 2][xpos - 1] = 1;
            }
        }
        if (turn == 0) {
            if (grid[ypos - 2][xpos - 1] == 1) {
                ill[ypos - 2][xpos - 1] = 2;
            }
            if (grid[ypos - 2][xpos - 1] == 2) {
                ill[ypos - 2][xpos - 1] = 1;
            }

        }
    }
//case7
    if (xpos + 2 < 8 && ypos + 1 <= 8) {
        if (turn == 1) {
            if (grid[ypos + 1][xpos + 2] == 0) {
                ill[ypos + 1][xpos + 2] = 2;
            }
            if (grid[ypos + 1][xpos + 2] == 2) {
                ill[ypos + 1][xpos + 2] = 1;
            }
        }
        if (turn == 0) {
            if (grid[ypos + 1][xpos + 2] == 1) {
                ill[ypos + 1][xpos + 2] = 2;
            }
            if (grid[ypos + 1][xpos + 2] == 2) {
                ill[ypos + 1][xpos + 2] = 1;
            }

        }
    }
    //case 8

    if (xpos + 2 < 8 && ypos - 1 >= 0) {
        if (turn == 1) {
            if (grid[ypos - 1][xpos + 2] == 0) {
                ill[ypos - 1][xpos + 2] = 2;
            }
            if (grid[ypos - 1][xpos + 2] == 2) {
                ill[ypos - 1][xpos + 2] = 1;
            }
        }
        if (turn == 0) {
            if (grid[ypos - 1][xpos + 2] == 1) {
                ill[ypos - 1][xpos + 2] = 2;
            }
            if (grid[ypos - 1][xpos + 2] == 2) {
                ill[ypos - 1][xpos + 2] = 1;
            }

        }
    }

}


void castlealg(int xpos, int ypos, int turn, int grid[8][8]){
    int i;

    //case right
    for (i = 1; i < 8; i++) {
        if (xpos + i < 8) {
            if (turn == 1) {
                if (grid[ypos][xpos + i] == 1) {
                    break;
                }
                if (grid[ypos][xpos + i] == 0) {
                    ill[ypos][xpos + i] = 2;
                    break;
                }
                if (grid[ypos][xpos + i] == 2) {
                    ill[ypos][xpos + i] = 1;
                }
            }
            if (turn == 0) {
                if (grid[ypos][xpos + i] == 0) {
                    break;
                }
                if (grid[ypos][xpos + i] == 1) {
                    ill[ypos][xpos + i] = 2;
                    break;
                }
                if (grid[ypos][xpos + i] == 2) {
                    ill[ypos][xpos + i] = 1;
                }
            }
        }
    }

    //case left

    for (i = 1; i < 8; i++) {
        if (xpos - i < 8) {
            if (turn == 1) {
                if (grid[ypos][xpos - i] == 1) {
                    break;
                }
                if (grid[ypos][xpos - i] == 0) {
                    ill[ypos][xpos - i] = 2;
                    break;
                }
                if (grid[ypos][xpos - i] == 2) {
                    ill[ypos][xpos - i] = 1;
                }
            }
            if (turn == 0) {
                if (grid[ypos][xpos - i] == 0) {
                    break;
                }
                if (grid[ypos][xpos - i] == 1) {
                    ill[ypos][xpos - i] = 2;
                    break;
                }
                if (grid[ypos][xpos - i] == 2) {
                    ill[ypos][xpos - i]= 1;
                }
            }
        }
    }

    //case down
    for (i = 1; i < 8; i++) {
        if (ypos + i < 8) {
            if (turn == 1) {
                if (grid[ypos + i][xpos] == 1) {
                    break;
                }
                if (grid[ypos + i][xpos] == 0) {
                    ill[ypos + i][xpos] = 2;
                    break;
                }
                if (grid[ypos + i][xpos] == 2) {
                    ill[ypos + i][xpos] = 1;
                }
            }
            if (turn == 0) {
                if (grid[ypos + i][xpos] == 0) {
                    break;
                }
                if (grid[ypos + i][xpos] == 1) {
                    ill[ypos + i][xpos] = 2;
                    break;
                }
                if (grid[ypos + i][xpos] == 2) {
                    ill[ypos + i][xpos] = 1;
                }
            }
        }
    }

    //case up
    for (i = 1; i < 8; i++) {
        if (ypos - i < 8) {
            if (turn == 1) {
                if (grid[ypos - i][xpos] == 1) {
                    break;
                }
                if (grid[ypos - i][xpos] == 0) {
                    ill[ypos - i][xpos] = 2;
                    break;
                }
                if (grid[ypos - i][xpos] == 2) {
                    ill[ypos - i][xpos] = 1;
                }
            }
            if (turn == 0) {
                if (grid[ypos - i][xpos] == 0) {
                    break;
                }
                if (grid[ypos - i][xpos] == 1) {
                    ill[ypos - i][xpos] = 2;
                    break;
                }
                if (grid[ypos - i][xpos] == 2) {
                    ill[ypos - i][xpos] = 1;
                }
            }
        }
    }
}

void queenalg(int xpos, int ypos, int turn, int grid[8][8]){
     int i,j,k,l;
    int xplus;
    int yplus;
    int xminus;
    int yminus;
// bottom right for loop
    for (i = 0; i < 8; i++) {
        xplus = xpos + i;
        yplus = ypos + i;
        if (xplus < 8 && yplus < 8) {
            if (turn == 1) {
                if (grid[yplus][xplus] == 1) {
                    break;
                }
                if (grid[yplus][xplus] == 0) {
                    ill[yplus][xplus] = 2;
                    break;
                }
                if (grid[yplus][xplus] == 2) {
                    ill[yplus][xplus] = 1;
                }
            }
            if (turn == 0) {
                if (grid[yplus][xplus] == 0) {
                    break;
                }
                if (grid[yplus][xplus] == 1) {
                    ill[yplus][xplus] = 2;
                    break;
                }
                if (grid[yplus][xplus] == 2) {
                    ill[yplus][xplus] = 1;
                }
            }

        }
    }


    //top right for loop
    for(j=0;j<8; j++){
         xplus=xpos+j;
         yminus=ypos-j;
                 if (xplus < 8 && yminus >= 0) {
            if (turn == 1) {
                if (grid[yminus][xplus] == 1) {
                    break;
                }
                if (grid[yminus][xplus] == 0) {
                    ill[yminus][xplus] = 2;
                    break;
                }
                if (grid[yminus][xplus] == 2) {
                    ill[yminus][xplus] = 1;
                }
            }
            if (turn == 0) {
                if (grid[yminus][xplus] == 0) {
                    break;
                }
                if (grid[yminus][xplus] == 1) {
                    ill[yminus][xplus] = 2;
                    break;
                }
                if (grid[yminus][xplus] == 2) {
                    ill[yminus][xplus] = 1;
                }
            }

        }

    }
    // bottom left for loop
    for(k=0;k<8; k++){
          xminus=xpos-k;
          yplus=ypos+k;
          if (xminus >=0 && yplus < 8) {
            if (turn == 1) {
                if (grid[yplus][xminus] == 1) {
                    break;
                }
                if (grid[yplus][xminus] == 0) {
                    ill[yplus][xminus] = 2;
                    break;
                }
                if (grid[yplus][xminus] == 2) {
                    ill[yplus][xminus] = 1;
                }
            }
            if (turn == 0) {
                if (grid[yplus][xminus] == 0) {
                    break;
                }
                if (grid[yplus][xminus] == 1) {
                    ill[yplus][xminus] = 2;
                    break;
                }
                if (grid[yplus][xminus] == 2) {
                    ill[yplus][xminus] = 1;
                }
            }

        }
    }
    //top left
    for(l=0;l<8; l++){
        xminus=xpos-l;
        yminus=ypos-l;
         if (xminus >=0 && yminus < 8) {
            if (turn == 1) {
                if (grid[yminus][xminus] == 1) {
                    break;
                }
                if (grid[yminus][xminus] == 0) {
                    ill[yminus][xminus] = 2;
                    break;
                }
                if (grid[yminus][xminus] == 2) {
                    ill[yminus][xminus] = 1;
                }
            }
            if (turn == 0) {
                if (grid[yminus][xminus] == 0) {
                    break;
                }
                if (grid[yminus][xminus] == 1) {
                    ill[yminus][xminus] = 2;
                    break;
                }
                if (grid[yminus][xminus] == 2) {
                    ill[yminus][xminus] = 1;
                }
            }

        }

    }
           //case right
    for (i = 1; i < 8; i++) {
        if (xpos + i < 8) {
            if (turn == 1) {
                if (grid[ypos][xpos + i] == 1) {
                    break;
                }
                if (grid[ypos][xpos + i] == 0) {
                    ill[ypos][xpos + i] = 2;
                    break;
                }
                if (grid[ypos][xpos + i] == 2) {
                    ill[ypos][xpos + i] = 1;
                }
            }
            if (turn == 0) {
                if (grid[ypos][xpos + i] == 0) {
                    break;
                }
                if (grid[ypos][xpos + i] == 1) {
                    ill[ypos][xpos + i] = 2;
                    break;
                }
                if (grid[ypos][xpos + i] == 2) {
                    ill[ypos][xpos + i] = 1;
                }
            }
        }
    }

    //case left

    for (i = 1; i < 8; i++) {
        if (xpos - i < 8) {
            if (turn == 1) {
                if (grid[ypos][xpos - i] == 1) {
                    break;
                }
                if (grid[ypos][xpos - i] == 0) {
                    ill[ypos][xpos - i] = 2;
                    break;
                }
                if (grid[ypos][xpos - i] == 2) {
                    ill[ypos][xpos - i] = 1;
                }
            }
            if (turn == 0) {
                if (grid[ypos][xpos - i] == 0) {
                    break;
                }
                if (grid[ypos][xpos - i] == 1) {
                    ill[ypos][xpos - i] = 2;
                    break;
                }
                if (grid[ypos][xpos - i] == 2) {
                    ill[ypos][xpos - i]= 1;
                }
            }
        }
    }

    //case down
    for (i = 1; i < 8; i++) {
        if (ypos + i < 8) {
            if (turn == 1) {
                if (grid[ypos + i][xpos] == 1) {
                    break;
                }
                if (grid[ypos + i][xpos] == 0) {
                    ill[ypos + i][xpos] = 2;
                    break;
                }
                if (grid[ypos + i][xpos] == 2) {
                    ill[ypos + i][xpos] = 1;
                }
            }
            if (turn == 0) {
                if (grid[ypos + i][xpos] == 0) {
                    break;
                }
                if (grid[ypos + i][xpos] == 1) {
                    ill[ypos + i][xpos] = 2;
                    break;
                }
                if (grid[ypos + i][xpos] == 2) {
                    ill[ypos + i][xpos] = 1;
                }
            }
        }
    }

    //case up
    for (i = 1; i < 8; i++) {
        if (ypos - i < 8) {
            if (turn == 1) {
                if (grid[ypos - i][xpos] == 1) {
                    break;
                }
                if (grid[ypos - i][xpos] == 0) {
                    ill[ypos - i][xpos] = 2;
                    break;
                }
                if (grid[ypos - i][xpos] == 2) {
                    ill[ypos - i][xpos] = 1;
                }
            }
            if (turn == 0) {
                if (grid[ypos - i][xpos] == 0) {
                    break;
                }
                if (grid[ypos - i][xpos] == 1) {
                    ill[ypos - i][xpos] = 2;
                    break;
                }
                if (grid[ypos - i][xpos] == 2) {
                    ill[ypos - i][xpos] = 1;
                }
            }
        }
    }


}


